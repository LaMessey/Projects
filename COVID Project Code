-- SQL Database Creation
create database Covid_Project;

--Assigning columns in new table covid_vaccinations
create table covid_vaccinations (
iso_code text,
continent text,
location text, 
date date,
total_tests bigint,
new_tests numeric,
total_tests_per_thousand numeric,
new_tests_per_thousand numeric,
new_tests_smoothed numeric,
new_tests_smoothed_per_thousand numeric,
positive_rate numeric,
tests_per_case numeric,
test_units text,
total_cavvinations numeric,
people_vaccinated numeric,
people_fully_vaccinated numeric,
total_boosters numeric,
new_vaccinations numeric,
new_vaccinations_smoothed numeric,
total_vaccinations_per_hundred numeric,
people_vaccinated_per_hundred numeric,
people_fully_vaccinated_per_hundred numeric,
total_boosters_per_hundred numeric,
new_vaccinations_smoothed_per_million numeric,
new_people_vaccinated_smoothed numeric,
new_people_vaccinated_smoothed_per_hundred numeric,
stringency_index numeric,
population_density numeric,
median_age numeric,
aged_65_older numeric,
aged_70_older numeric,
gdp_per_capita numeric,
extreme_poverty numeric,
cardiovasc_death_rate numeric,
diabetes_prevalence numeric,
female_smokers numeric,
male_smokers numeric,
handwashing_facilities numeric,
hospital_beds_per_thousand numeric,
life_expectancy numeric,
human_development_index numeric,
excess_mortality_cumulative_absolute numeric,
excess_mortality_cumulative numeric, 
excess_mortality numeric,
excess_mortality_cumulative_per_million numeric
)	

--Creating second table of covid_deaths
create table covid_deaths (
iso_code text,
continent text, 
location text,
date date, 
population numeric,
total_cases numeric,
new_cases numeric,
total_deaths numeric,
new_deaths_smoothed numeric,
total_cases_per_millions
new_cases_per_million numeric,
new_cases_smothed_per_million numeric,
total_deaths_per_million numeric,
new_deaths_smoothed_per_million numeric,
reproduction_rate numeric,
)

--Ensuring database and tables were created properly

SELECT*
FROM public.covid_deaths
order by 3,4
limit 10;
											
SELECT*
FROM public.covid_vaccinations
order by 3,4
limit 10

--Selecting data that I am going to  focus on (focus on location and date)
Select Location, date, total_cases, new_cases, total_deaths, population
from public.covid_deaths
order by 1,2;
--Initially we can see that the numbers seem to grow as time goes on.(will be looking at YOY and drilling down) 

--Finding Total Cases vs Total Deaths (percentage of people who died who had covid)
--just looking at Afganistan --rate about 4%
Select Location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as infection_death_rate
from public.covid_deaths
order by 1,2;

-- Checking out US death rate (1.8%) much lower than Afghanistan (compare and contrast likleyhood of dying after covid against GDP)
-- Likelyhood of dying after contraction of COVID in US 
Select Location, date, total_cases, total_deaths, (total_deaths/total_cases)*100 as infection_death_rate
from public.covid_deaths
Where location like '%United States%'
order by 1,2;

-- Checking out total cases versus population (United sStates) this hows the percentatge of population that contracted covid 
Select Location, date, population, total_cases, (total_cases/population)*100 as Population_contraction_rate
from public.covid_deaths
Where location like '%United States%'
order by 1,2;

--What countries have the highest infection rates compared to the population?Calculated by using MAX=highest infection count per country. 
Select Location, population, MAX(total_cases) as Highest_infect_count, MAX((total_cases/population))*100 as population_percent_infected
from public.covid_deaths
Group by Location, population
order by population_percent_infected desc;


--Looking at mortality rate - highest deathcount per population
--Needing to cast as interger-
Select Location, MAX(cast(total_deaths as int)) as Total_death_cnt
from public.covid_deaths
Group by Location, population
order by Total_death_cnt desc;
--noticing that world, high income and upper middle income etc is showing as a location. 
--Also showing continents as null so adding not null
Select Location, MAX(cast(total_deaths as int)) as Total_death_cnt
from public.covid_deaths
Where continent is not null
Group by Location
order by Total_death_cnt desc;
--United states is highest 

--Grouping by location
Select location, MAX(cast(total_deaths as int)) as Total_death_cnt
from public.covid_deaths
Where continent is null
Group by location
order by Total_death_cnt desc;

--Grouping by continent
Select continent, MAX(cast(total_deaths as int)) as Total_death_cnt
from public.covid_deaths
Where continent is not null
Group by continent
order by Total_death_cnt desc;

--Showing continents with the highets death count per population
Select continent, MAX(cast(total_deaths as int)) as Total_death_cnt
from public.covid_deaths
Where continent is not null
Group by continent
order by Total_death_cnt desc;

--GLOBAL SCALE--
Select date, SUM(new_cases) as total_cases, SUM(cast(new_deaths as int)) as total_deaths, SUM(cast(new_deaths as int))/SUM(new_cases)*100 as DeathPercentage
from public.covid_deaths
Where continent is not null
Group by date
Order by 1, 2;
--initially noticing that percentage rise and then fall. 
--the world overall
Select SUM(new_cases) as total_cases, SUM(cast(new_deaths as int)) as total_deaths, SUM(cast(new_deaths as int))/SUM(new_cases)*100 as DeathPercentage
from public.covid_deaths
Where continent is not null
--Group by date
Order by 1, 2;
--overall numbers for the world. our deathrate most recently is 1%

--BRINGING IN THE VACCINATION CHARTS

Select *
From public.covid_vaccinations
limit 10;

--JOINING TABLES by using location and date
SELECT * 
FROM public.covid_deaths as dea
Join public.covid_vaccinations as vac 
	on dea.location = vac.location
	and dea.date = vac.date

--Looking at total population versus vaccinations
--Total amount of people in the world that have been vaccinated--Using new vaccinations per day (there is a total vaccinations)
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations
FROM public.covid_deaths as dea
Join public.covid_vaccinations as vac 
	on dea.location = vac.location
	and dea.date = vac.date
WHERE dea.continent is not null
order by 2,3

--adding a rolling count per location
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
	SUM(cast(vac.new_vaccinations as int)) OVER (Partition by dea.location Order by dea.location, 
	dea.date) as RollingCountVaxxed
FROM public.covid_deaths as dea
Join public.covid_vaccinations as vac 
	on dea.location = vac.location
	and dea.date = vac.date
WHERE dea.continent is not null
order by 2,3;

--CREATING VIEW--

Create view PercentPopulatcionVaccinated as
SELECT dea.continent, dea.location, dea.date, dea.population, vac.new_vaccinations, 
	SUM(cast(vac.new_vaccinations as int)) OVER (Partition by dea.location Order by dea.location, 
	dea.date) as RollingCountVaxxed
FROM public.covid_deaths as dea
Join public.covid_vaccinations as vac 
	on dea.location = vac.location
	and dea.date = vac.date
WHERE dea.continent is not null
